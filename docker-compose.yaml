services:
  postgres:
    image: postgres:17
    container_name: ink-flow-postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    volumes:
      - ./script/postgres/:/docker-entrypoint-initdb.d/
    ports:
      - "15432:5432"

  redis:
    image: redis:7
    container_name: ink-flow-redis
    ports:
      - "16379:6379"

#  elasticsearch:
#    image: elasticsearch:8.17.2
#    container_name: ink-flow-elasticsearch
#    ports:
#      - "9200:9200"
#    volumes:
#      - ./script/es/es-ik.sh:/entrypoint.sh
#    environment:
#      "discovery.type": "single-node"
##      -Xms 初始内存， -Xmx 最大内存
#      "ES_JAVA_OPTS": "-Xms84m -Xmx512m"
#      "xpack.security.enabled": false
#    entrypoint: ["/bin/bash", "/entrypoint.sh"]
  meilisearch:
    image: getmeili/meilisearch:nightly
    container_name: ink-flow-meilisearch
    ports:
      - "7700:7700"
#    volumes:
#      - ./script/meilisearch:/data.ms

  prometheus:
    image: prom/prometheus:v3.2.1
    container_name: ink-flow-prometheus
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  kafka:
    image: bitnami/kafka:3.9.0
    container_name: ink-flow-kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=0
      #      - 允许自动创建 topic，线上不要开启
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ink-flow-kafka-ui
    ports:
      - "18080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: true

  jeager:
    image: jaegertracing/jaeger:2.4.0
    container_name: ink-flow-jeager
    ports:
      - "16686:16686" # jaeger ui
      - "4317:4317" # jaeger grpc
      - "4318:4318" # jaeger http
      - "5778:5778" # jaeger thrift
      - "9411:9411" # jaeger udp

  grafana:
    image: grafana/grafana:11.5.2
    container_name: ink-flow-grafana
    ports:
      - "3000:3000"

#  gorse:
#    image: zhenghaoz/gorse-in-one
#    restart: unless-stopped
#    ports:
#      - "8086:8086"   # gRPC port
#      - "8088:8088"   # HTTP port
#    environment:
#      # Use Redis as cache storage backend.
#      GORSE_CACHE_STORE: redis://ink-flow-redis:6379
#      # Use MySQL as data storage backend.
#      GORSE_DATA_STORE: postgres://root:root@ink-flow-postgres:5432/gorse
#    command: >
#      -c /etc/gorse/config.toml
#      --log-path /var/log/gorse/master.log
#      --cache-path /var/lib/gorse/master_cache.data
#    volumes:
#      # Mount the configuration file.
#      - ./config.toml:/etc/gorse/config.toml
#    depends_on:
#      - redis
#      - postgres
#      - zipkin

  temporal:
    build:
      context: ./deps/temporal
      dockerfile: Dockerfile
    container_name: ink-flow-temporal
    ports:
      - "7233:7233" # temporal server
      - "8233:8233" # temporal web
