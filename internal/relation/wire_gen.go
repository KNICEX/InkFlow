// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package relation

import (
	"github.com/IBM/sarama"
	"github.com/KNICEX/InkFlow/internal/relation/internal/event"
	"github.com/KNICEX/InkFlow/internal/relation/internal/repo"
	"github.com/KNICEX/InkFlow/internal/relation/internal/repo/cache"
	"github.com/KNICEX/InkFlow/internal/relation/internal/repo/dao"
	"github.com/KNICEX/InkFlow/internal/relation/internal/service"
	"github.com/KNICEX/InkFlow/pkg/logx"
	"github.com/KNICEX/InkFlow/pkg/snowflakex"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitFollowService(cmd redis.Cmdable, db *gorm.DB, producer sarama.SyncProducer, l logx.Logger) service.FollowService {
	node := initSnowflake()
	followRelationDAO := initFollowDAO(db, node, l)
	followCache := cache.NewRedisFollowCache(cmd)
	followRepo := repo.NewCachedFollowRepo(followRelationDAO, followCache, l)
	followProducer := event.NewKafkaFollowProducer(producer)
	followService := service.NewFollowService(followRepo, followProducer, l)
	return followService
}

// wire.go:

func initSnowflake() snowflakex.Node {
	return snowflakex.NewNode(snowflakex.DefaultStartTime, 0)
}

func initFollowDAO(db *gorm.DB, node snowflakex.Node, l logx.Logger) dao.FollowRelationDAO {
	if err := dao.InitTable(db); err != nil {
		panic(err)
	}
	return dao.NewGormFollowRelationDAO(db, node, l)
}
