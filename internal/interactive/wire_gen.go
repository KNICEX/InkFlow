// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package interactive

import (
	"github.com/KNICEX/InkFlow/internal/interactive/internal/repo"
	"github.com/KNICEX/InkFlow/internal/interactive/internal/repo/cache"
	"github.com/KNICEX/InkFlow/internal/interactive/internal/repo/dao"
	"github.com/KNICEX/InkFlow/internal/interactive/internal/service"
	"github.com/KNICEX/InkFlow/pkg/logx"
	"github.com/KNICEX/InkFlow/pkg/snowflakex"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitInteractiveService(cmd redis.Cmdable, db *gorm.DB, l logx.Logger) service.InteractiveService {
	interactiveCache := cache.NewRedisInteractiveCache(cmd)
	node := initSnowflakeNode()
	interactiveDAO := dao.NewGormInteractiveDAO(db, node, l)
	interactiveRepo := repo.NewCachedInteractiveRepo(interactiveCache, interactiveDAO, l)
	interactiveService := service.NewInteractiveService(interactiveRepo, l)
	return interactiveService
}

// wire.go:

func initSnowflakeNode() snowflakex.Node {
	return snowflakex.NewNode(snowflakex.DefaultStartTime, 0)
}

func initDAO(db *gorm.DB, node snowflakex.Node, l logx.Logger) dao.InteractiveDAO {
	if err := dao.InitTables(db); err != nil {
		panic(err)
	}
	return dao.NewGormInteractiveDAO(db, node, l)
}
