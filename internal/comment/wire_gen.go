// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package comment

import (
	"github.com/IBM/sarama"
	"github.com/KNICEX/InkFlow/internal/comment/internal/event"
	"github.com/KNICEX/InkFlow/internal/comment/internal/repo"
	"github.com/KNICEX/InkFlow/internal/comment/internal/repo/cache"
	"github.com/KNICEX/InkFlow/internal/comment/internal/repo/dao"
	service2 "github.com/KNICEX/InkFlow/internal/comment/internal/service"
	"github.com/KNICEX/InkFlow/internal/ink"
	"github.com/KNICEX/InkFlow/pkg/logx"
	"github.com/KNICEX/InkFlow/pkg/snowflakex"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitCommentService(db *gorm.DB, cmd redis.Cmdable, inkSvc ink.Service, producer sarama.SyncProducer, l logx.Logger) service2.CommentService {
	node := initSnowflakeNode()
	commentDAO := initDAO(db, node, l)
	commentCache := cache.NewRedisCommentCache(cmd)
	commentRepo := repo.NewCachedCommentRepo(commentDAO, commentCache, l)
	commentEvtProducer := event.NewKafkaCommentEvtProducer(producer)
	commentService := service2.NewCommentService(commentRepo, inkSvc, commentEvtProducer, l)
	return commentService
}

// wire.go:

func initSnowflakeNode() snowflakex.Node {
	return snowflakex.NewNode(snowflakex.DefaultStartTime, 0)
}

func initDAO(db *gorm.DB, node snowflakex.Node, l logx.Logger) dao.CommentDAO {
	dao.Init(db)
	return dao.NewGormCommentDAO(db, node, l)
}
